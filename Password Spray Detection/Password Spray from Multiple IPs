This query checks for potential password spray activity based on anomalous failed sign-in attempts coming from multiple source IP addresses.
This approach checks history of sign-ins per user and their source IPs. This will then be compared with failed sign-in attempts to check for clusters of new IP addresses failing in a time window. Additionally, also correlated with AADUserRiskEvents for known risk event detections for candidate users in the final results.
References: Hunting for Low and Slow Password Sprays Using Machine Learning (ML Deep Dive), Protect your business from password sprays with Microsoft DART recommendations | Microsoft Security Blog


// Title: Custom Password Spray Detection for Multiple IP
// Author: Elmark Corpus  
// Version 3.4
// Description: Checks history of sign-ins per user and their IPs, then compare this with failed sign-in attempts to check for clusters of new IPs failing in a time window

let timeRange = 30d; // Timerange to check for PW spraying activities, can be modified per requirements
let lookback = 30d; // 30d lookback should be enough for checking history of sign-ins
let authenticationWindow = 5m; // Cluster failed sign-in attempts per time window
let authenticationThreshold = 4; // Threshold for failed authentication attempts, modify based on risk appetite
SigninLogs
| where TimeGenerated > ago(lookback)
| summarize TotalIPCount=count(), ListOfUsers=make_set(UserPrincipalName) by IPAddress//, bin(TimeGenerated, 20m)
| where TotalIPCount > 1 and array_length(ListOfUsers) > 1 // Threshold can be modified to remove potentially anomalous single IPs
| join kind=rightanti ( // Filter all failed sign-ins with IP addresses not in the list of history of usual successful IP address sign=ins
    SigninLogs  
    | where TimeGenerated > ago(timeRange)  
    | extend ['FailureReason']=tostring(Status.failureReason)  
    | extend ['Location']=strcat(tostring(LocationDetails.city),', ', tostring(LocationDetails.state),', ', tostring(LocationDetails.countryOrRegion)) 
    | extend ['LocationCountry']=tostring(LocationDetails.countryOrRegion)
    | extend ['DeviceName']=tostring(DeviceDetail.displayName)
    | where ResultType in ("50126", "50053", "50055", "50056") // First, we filter out failed sign-ins and their error descriptions, included are error codes related to incorrect password 
    | where AuthenticationRequirement == 'singleFactorAuthentication' // Focusing on legacy authentication, or attempts targeting non-MFA
    ) on IPAddress
| summarize 
    StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),
    NumberOfDistinctIPs=dcount(IPAddress), 
    NumberOfDistinctLocations=dcount(LocationCountry), 
    FailureReason=make_set(FailureReason, 50), 
    SourceLocations=make_set(LocationCountry),
    SourceIPs=make_set(IPAddress),
    UserAgents=make_set(UserAgent)
    by UserPrincipalName, UserDisplayName, bin(TimeGenerated, authenticationWindow)
| extend ['Duration']=EndTime-StartTime
| where NumberOfDistinctIPs > 1 and NumberOfDistinctLocations > 1 // Adjust based on observations
| summarize WindowBreachCount=count(SourceIPs), UserAgents=make_set(UserAgents, 50),  FailureReason=make_set(FailureReason, 50), StartTime = min(StartTime), EndTime = max(EndTime) by TargetUsers=UserPrincipalName, UserDisplayName // Get candidate target users based on multiple clusters of failed sign-ins
| where WindowBreachCount > 1 // Check more than 1 sign-in failure clusters
// Extra query to correlate with ADDUserRisKEvents
| join kind=leftouter (
    AADUserRiskEvents 
    | where TimeGenerated >= ago(lookback) 
    | summarize ListOfKnownRiskEvents=make_set(RiskEventType) 
    by UserPrincipalName=tolower(UserPrincipalName)
    ) on $left.TargetUsers == $right.UserPrincipalName
