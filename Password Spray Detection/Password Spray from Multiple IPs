// Title: Custom Password Spray Detection for Multiple IP
// Author: Elmark Corpus  
// Version 1.2
// Checks anomalous IP address counts failing for multiple users, correlate also with AADUserRiskEvents for risk event types

let authenticationWindow = 5m; // Cluster failed sign-in attempts per time window
let authenticationThreshold = 4; // Threshold for failed authentication attempts, modify based on risk appetite
SigninLogs
| extend ['FailureReason']=tostring(Status.failureReason)  
| extend ['Location']=strcat(tostring(LocationDetails.city),', ', tostring(LocationDetails.state),', ', tostring(LocationDetails.countryOrRegion)) 
| extend ['LocationCountry']=tostring(LocationDetails.countryOrRegion)
| extend ['DeviceName']=tostring(DeviceDetail.displayName)
| where ResultType in ("50126", "50053", "50055", "50056") // First, we filter out failed sign-ins and their error descriptions, included are error codes related to incorrect password 
| where AuthenticationRequirement == 'singleFactorAuthentication' // Focusing on legacy authentication, or attempts targeting non-MFA
| summarize 
    StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),
    NumberOfDistinctIPs=dcount(IPAddress), 
    NumberOfDistinctLocations=dcount(LocationCountry), 
    FailureReason=make_set(FailureReason, 50), 
    SourceLocations=make_set(LocationCountry),
    SourceIPs=make_set(IPAddress),
    UserAgents=make_set(UserAgent)
    by UserPrincipalName, UserDisplayName, bin(TimeGenerated, authenticationWindow)
| extend ['Duration']=EndTime-StartTime
| where NumberOfDistinctIPs > 1 and NumberOfDistinctLocations > 1 // Adjust based on observations
| summarize WindowBreachCount=count(SourceIPs), SourceIPs=make_set(SourceIPs), UserAgents=make_set(UserAgents, 50),  FailureReason=make_set(FailureReason, 50), StartTime = min(StartTime), EndTime = max(EndTime) by TargetUsers=UserPrincipalName, UserDisplayName // Get candidate target users based on multiple clusters of failed sign-ins
| where WindowBreachCount > 1 // Check more than 1 sign-in failure clusters
// Extra query to correlate with ADDUserRisKEvents
| join kind=leftouter (
    AADUserRiskEvents 
    | where TimeGenerated >= ago(lookback) 
    | summarize ListOfKnownRiskEvents=make_set(RiskEventType) 
    by UserPrincipalName=tolower(UserPrincipalName)
    ) on $left.TargetUsers == $right.UserPrincipalName

