This query checks for potential password spray activity based on anomalous failed sign-in attempts coming from a single source IP address.
This approach checks for number of failed sign-in attempts in a short timeframe (authentication window) and number of breached window thresholds (spike of failed sign-in clusters). It also filters out authentication attempts not using MFA, which indicates attempts on accounts using legacy authentication methods.
References: Hunting for Low and Slow Password Sprays Using Machine Learning (ML Deep Dive), Protect your business from password sprays with Microsoft DART recommendations | Microsoft Security Blog

// Title: Custom Password Spray Detection for single IP
// Author: Elmark Corpus  
// Version 2.1
// Description: This approach checks for number of failed sign-in attempts from a single IP in a short timeframe (authentication window) and number of breached window thresholds (spike of failed sign-in clusters)

let timeRange = 30d; // Timerange to check for PW spraying activities, can be 24 hours for daily NRT detections
let authenticationWindow = 10m; // Cluster failed sign-in attempts per time window, can be increased to catch low and slow attempts 
let authenticationThreshold = 3; // Threshold for failed authentication attempts, modify based on risk appetite  
let WindowBreachedThreshold = 1; // Threshold for frequency of failed clusters per IP
SigninLogs  
| where TimeGenerated > ago(timeRange)  
| extend ['FailureReason']=tostring(Status.failureReason)  
| extend ['Location']=strcat(tostring(LocationDetails.city),', ', tostring(LocationDetails.state),', ', tostring(LocationDetails.countryOrRegion)) 
| extend ['DeviceName']=tostring(DeviceDetail.displayName)
| where ResultType in ("50126", "50053", "50055", "50056") // First, we filter out failed sign-ins and their error descriptions, included are error codes related to incorrect password 
| where AuthenticationRequirement == 'singleFactorAuthentication' // Focusing on legacy authentication, or attempts targeting non-MFA
| summarize 
    NumberOfFailedDistinctUsers=dcount(UserPrincipalName), 
    User=make_set(UserPrincipalName, 100),
    FailureReason=make_set(FailureReason, 50), 
    StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by bin(['TimeWindow']=TimeGenerated, authenticationWindow), UserAgent, SourceIP=IPAddress
| extend ['Duration']=EndTime-StartTime
| where NumberOfFailedDistinctUsers > authenticationThreshold // Here, we're using authenticationThreshold to count number of failed distinct users, detecting cluster of failed sign-ins in a small amount of time
| summarize WindowBreachCount=count(SourceIP), UserAgent=make_set(UserAgent, 50), TargetUsers=make_set(User, 100) by SourceIP // Checks how many times each SourceIP breached authentication window
| where WindowBreachCount > WindowBreachedThreshold // Filter only higher counts of failed sign-in clusters
